
A good minishell tester: https://github.com/thallard/minishell_tester

/*     NEED TO BE FIXED    */
echo "bob | machin ; yo " " ->invalid read of 1: main, minishell, parse_line, create_token_list
==10674== Invalid read of size 1
==10674==    at 0x100006117: create_token_list (tokenizer.c:30)
==10674==    by 0x100005BB0: parse_line (parser.c:67)
==10674==    by 0x100002256: minishell (main.c:87)
==10674==    by 0x10000232F: main (main.c:104)
==10674==  Address 0x1009176ac is 0 bytes after a block of size 28 alloc'd
==10674==    at 0x10017C545: malloc (in /Users/vjean/.brew/Cellar/valgrind/HEAD-6ff08b6/libexec/valgrind/vgpreload_memcheck-amd64-darwin.so)
==10674==    by 0x100031928: xmalloc (xmalloc.c:59)
==10674==    by 0x100006D2A: readline_internal_teardown (readline.c:522)
==10674==    by 0x100006816: readline (readline.c:734)
==10674==    by 0x1000021F3: minishell (main.c:81)
==10674==    by 0x10000232F: main (main.c:104)
==10674== 



------------------------------------------------------------------------------------------------------------------------------------------------------

 /*      ALL GOOD! :)      */
echo $? => MNSH: displays last error code			 BASH: same
echo bonjour > test\ 1 => fichier cree et bonjour dedans       BASH: fichier cree et bonjour dedans
cd $HOME/Documents => MNSH:  se deplace bien a la bonne place  BASH: se deplace dans le bon fichier
unset var1 # with undefined var1 => MNSH:  works               BASH: works the same as mnsh
echo 2 >> out1 > out2 => MNSH:  cree les 2 fichiers, ecrit rien dans out1 et ecrit 2 dans out2           BASH: same as mnsh
echo 2 > out1 >> out2 => MNSH:  cree les 2 fichiers, ecrit rien dans out1 et ecrit 2 dans out 2          BASH: same as mnsh
$ => MNSH:    command not found                      BASH: command not found
echo test > file test1 => MNSH: cree le fichier file et ecrit test test1            BASH: cree le fichier file et ecrit test test1
echo => MNSH:  newline                         		 BASH: same as mnsh
echo simple => MNSH:   simple                        BASH: same
echo -n simple => MNSH:     simpleMNSH :)            BASH: same
echo '' => MNSH:    newline                          BASH: same
echo "" => MNSH:   newline                           BASH: same
echo > a Hello World! => MNSH:  cree fichier a et ecrit Hello World                         BASH: same
> a echo Hello World! => MNSH:  cree fichier a et ecrit Hello World                         BASH: same
cat < < => MNSH:    invalid file name and exit minishell                       BASH: same
cat > > => MNSH:    invalid file name and exit minishell                       BASH: same
file_name_in_current_dir => MNSH: command not found                          BASH: command not found
cd ../../../../../.. ; pwd => MNSH:      /                     BASH: /
export "test=ici"=coucou => MNSH:       cree test=ici=coucou                    BASH: same as mnsh
c$var Makefile # with var=at => MNSH:  display at                         BASH: display at
$bla # with bla not defined => MNSH:   rien                        BASH: rien
$LESS$VAR => MNSH:    command not found                       BASH: command not found
/bin/echo bonjour => MNSH:  bonjour dans le terminal                         BASH: same
not_cmd => MNSH:     command not found                      BASH: command not found
echo bonjour > $test w/ t => MNSH:    test=2; cree le fichier 2 et ecrit bonjour          BASH: same as mnsh
cat < test # with non-existent test  => MNSH: invalid filename and exit minishell                        BASH: test: no such file or directory
"exit retour a la ligne" => MNSH:    quitte minishell                       BASH: ecrit exit et quitte bash
> a ls > b < Makefile => MNSH:  cree fichier a et b. a est vide et b contient le resultat de ls   BASH: same
echo "$HOME" => MNSH:  same as bash                         BASH: /Users/valeriejean
echo '$HOME' => MNSH:  same as bash                         BASH: $HOME
export ; env # display is different for both commands => MNSH:  same as bash   env       BASH: export only is env + declare -x
echo hi";" hihi => MNSH:  hi; hihi                  BASH: same
echo hi " ; " hihi => MNSH:     hi  ;  hihi         BASH: same
echo "bip | bip ; coyotte > < " "
cd no_file => MNSH:      invalid path given         BASH: no such file or directory
cd a b c d => MNSH:  invalid path given             BASH: no such file or directory
pwd a => MNSH:     /                      BASH: /
pwd a b c d => MNSH:         /                  BASH: /
cd / => MNSH:         /                  BASH: same
cd . => MNSH:  stay there                         BASH: same
echo "\n \n \n" => MNSH:   print 3 \n                BASH: same
# write something then press ctrl+d => MNSH:   nothing                        BASH: same
# write something then press ctrl+\ => MNSH:   nothing                        BASH: same
echo $HOME => MNSH:  /Users/valeriejean                     BASH: same
> log echo coucou => MNSH:  same as bash                    BASH: cree le fichier log et ecrit coucou
export "HI= hi" => MNSH:    create HI= hi                       BASH: same
/bin/ls => MNSH: print ls on terminal                          BASH: same
l^Ds => MNSH:    command not found                       BASH: command not found
cat < Makefile | grep gcc > output => MNSH:   cree output et ecrit CC = gcc                        BASH: same as mnsh
env puis export puis env # vars aren't sorted => MNSH:     same as bash                      BASH:
not_cmd bonjour > salut => MNSH: command not found                          BASH: command not found but salut is created ALL GOOD
exit # should return the last exit code value => MNSH:  echo $? does not work             BASH: oui
export var ="cat Makefile | grep >" => MNSH:  var cree sans rien d'autre     GOOD             BASH: ="cat Makefile | grep >" not a valid identifier
export var; export var=test => MNSH:  cree la variable var et ajuste la variable var=test     GOOD       BASH: export var n'est pas cree. Seulement lorsqu'il y a un =
echo bonjour > $test # with test not defined => MNSH: invalid filename  BASH: ambiguous redirect  					**prob avec redirection; il y aurait un exit à une mauvaise place??
echo bonjour > > out => MNSH: invalid filename        					BASH: syntax error near unexpected token >  **prob avec redirection; il y aurait un exit à une mauvaise place??
echo bonjour >>> test => MNSH: invalid filename   						BASH: syntax error near unexpected token > 	**prob avec redirection; il y aurait un exit à une mauvaise place??
cat kdjfklasjflkdj => check exit code. Not the same from bash
exit -10 => MNSH: 2                       BASH: 246
exit +10 => MNSH: 2                         BASH: 10
export "HI =hi" => MNSH:    create Hi =hi                       BASH: 'HI =hi' not a valid identifier **probablement revoir avec la tokenization
Variable d'environnement ne peut pas commencer par un chiffre (lettre ou _ seulement): EXPORT
unset TEST va unset TEST3 (exemple): il faut strncmp des var d'env et non pas a partir de l'arg
echo "bonjour (Manque un guillemet) : segfault. Des fois, segfault, des fois double free et abort. Ex: echo "bonjour (plein de fois) et suivi de ls, puis retour a echo "bonjour FIXED
echo allo > newfile | ls -l > newfile | grep bonjour =>HANG -- devrait donner ls -l ouput dans newfile FIXED
Autre exemple de hang : ls -l > newfile | grep vjean | wc -l > test =>HANG (devrait output 0 dans test et le ls -l dans newfile) FIXED
unset PATH. Then ls: invalid read of size 8=>main, minishell, execute_cmd_block, try_fork, child_process and exec_with_paths. 
Mais quand je fais unset PATH et env, zero probleme... invalid read of size 8=> main, minishell, execute_cmd_block, try_fork, child_process, execute_builtins, get_env

/*   YUP, DIFFERENT BUT LEGIT   */
echo -n -n -nnnn -nnnnm => MNSH:  -n -nnnn -nnnnmMNSH :)       BASH: -nnnnmbash-3.2$ **Le sujet demande de gérer echo avec -n SEULEMENT. Puis, le projet ne demande pas de faire une copie de bash
echo "bip | bip ; coyotte > < " " => MNSH:  non terminated quotes                         BASH:  newline and >; need to do ctrl-C to end it          **Le sujet demande de ne pas interpréter les quotes non-fermées.
echo ;; => MNSH: print 2 ;                          BASH: syntax error near unexpected token ;;    **Le sujet demande de ne pas gérer ;. Notre minishell le gère comme ça.
echo | => MNSH:    new line                       BASH: new prompt > 							**Bash attend une commande; sans le dire. On ne sait pas ce qu'il veut. Le sujet ne demande de refaire une copie du bash. On renvoie une ligne.
| echo => MNSH:    newline                       BASH: syntax error near unexpected token |     **Bash attend une commande; sans le dire. On ne sait pas ce qu'il veut. Le sujet ne demande de refaire une copie du bash. On renvoie une ligne.
echo "\n \n \\n" => MNSH:   \n \n \\n                BASH: \n \n \n  **Pas demandé de gérer le backslash
echo bonjour ; | => MNSH: bonjour ;     BASH: syntax error near unexpected token | **Point-virgule pas demandé**
echo bonjour ; ls => MNSH: bonjour ; ls            BASH: bonjour et fais ls (; disparu) **Point-virgule pas demandé**
echo "\" => MNSH:   imprime \                        BASH: new prompt >; **Pas demandé de gérer le backslash
echo bonjour | | => MNSH: fais rien    BASH: syntax error near unexpected token | **good*
echo "\s" & echo "\s" => MNSH:  \s & echo \s       BASH: [1] 13271
\s **BONUS
| => MNSH: fais rien                   BASH: syntax error near unexpected token |
cd ~ => MNSH:  invalid path given                 BASH: bring you back to valeriejean   ***Pas demandé
cd => MNSH:  invalid path given; no need to deal w/        BASH: bring you back to valeriejean **Pas demandé
sort | ls # check output order => MNSH:    hang and after ctrl-C print                       BASH: ls first then hang ***Ici, on peut argumenter qu'anyway, sort a besoin d'un fichier comme argument. Non pas une commande.
echo bonjour |; => MNSH: error cmd not found       BASH: syntax error near unexpected token ;
echo > => MNSH:  error: invalid file name          BASH: syntax error near unexpected token newline
minishell # binary not in path without "./" before => MNSH:  fait rien      BASH: command not found
; => MNSH:  command not found                         BASH: syntax error near unexpected token ;
echo coucou | ; => MNSH: command not found            BASH: syntax error near unexpected token ;
# write something the press ctrl+c => MNSH:   new prompt; but one extra            BASH: same but not the extra one
echo hudifg d | | hugdfihd => MNSH:  fait rien              BASH: syntax error near unexpected token |
cat < > => MNSH:    invalid file name                       BASH: syntax error near unexpected token >
cat /dev/random | head -n 1 | cat -e => MNSH:  hang; apres ctrl-C: �|M-^]�GM-^J/��=���+^K�4�M-^V��}C   BASH: ^H��M-^GM-^B*^\M-^\�+�R%�x|�.P�M-^U�^X�^_+bM-^H�M-^ZM-^G]�,�uh^ZM-^I$ **/dev/random est un fucking intense test. Sérieux, tu le fais avec un fichier normal, zéro prob
sleep 5 | exit => MNSH:  quit/exit minishell                BASH: new prompt **need to check this one     **Exit est un built-in de NOTRE minishell que tu appelles et il fait le bon comportement demandé.
exit 0 | exit 1 => MNSH:   quit minishell and 0 is the exit status                          BASH: after, echo $? = 1; stay in bash    ***prob AVEC exit et redirection??
exit 1 | exit 0 => MNSH:    make: *** [run] Error 1                        BASH: 0 and stay in bash     ***prob AVEC exit et redirection??
cat | cat | cat | ls # check outputs order => MNSH:     hang    apres ctrl-C, imprime ls                  BASH: ecrit ls dans le terminal, puis hang
export "" et unset "" => export "" est une string comme si export envoyer seul. Dans notre minishell, string vide, on enlève.
unset "": dans notre minishell, on envoie un message d'erreur; car string vide et il faut une string pour unset
⬇️ Pour avoir le bon exit code, ça serait à setup lors des redirections; mais jusqu'à quel point on veut pousser là.
cat Makefile | grep capr | head -n 5 | cd test (mybin) # check status code => MNSH:   invalid path given. 1    BASH: 258; syntax error near unexpected token ()
cat Makefile | grep pr | head -n 5 | cat test (bin) # check status code => MNSH: test: no such file; (bin) no such file   1          BASH: 258 same error as previous
cat Makefile | grep pr | head -n 5 | hello (NA) # check status code => MNSH: cmd not found       0                 BASH: 258, same error as previous
